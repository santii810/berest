package es.uvigo.esei.sgvilar.berest.entities;
// Generated 12-mar-2019 17:18:59 by Hibernate Tools 4.3.1


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * PredictionRequest generated by hbm2java
 */
@Getter
@Setter
@Entity
@Table(name = "prediction_request", catalog = "")
public class PredictionRequestEntity implements java.io.Serializable {


    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    private Integer id;


    @Column(name = "number_of_documents")
    private Integer numberOfDocuments;
    @Column(name = "number_of_documents_recived")
    private Integer numberOfDocumentsRecived;
    @Column(name = "number_of_predictions")
    private Integer numberOfPredictions;
    @Column(name = "number_of_responses")
    private Integer numberOfResponses;
    @Column(name = "number_of_types")
    private Integer numberOfTypes;
    @Column(name = "unreachable_count")
    private Integer unreachableCount;
    @Column(name = "is_expired")
    private Boolean isExpired;
    @Column(name = "is_end")
    private Boolean isEnd;
    @Column(name = "is_sended")
    private Boolean isSended;
    @Column(name = "is_private")
    private Boolean isPrivate;
    @Column(name = "ends_with_error")
    private Boolean endsWithError;
    @Column(name = "to_evaluate")
    private Boolean toEvaluate;
    @Column(name = "parameters")
    private String parameters;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    private Date created;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "recived", length = 19)
    private Date recived;
    @Column(name = "recived_int")
    private Integer recivedInt;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "expired", length = 19)
    private Date expired;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "sended", length = 19)
    private Date sended;
    @Column(name = "sended_int")
    private Integer sendedInt;
    @Column(name = "format_type", length = 50)
    private String formatType;
    @Column(name = "total_time", precision = 12, scale = 0)
    private Float totalTime;
    @Column(name = "avg_time_per_document", precision = 12, scale = 0)
    private Float avgTimePerDocument;
    @Column(name = "avg_time_per_prediction", precision = 12, scale = 0)
    private Float avgTimePerPrediction;
    @Column(name = "has_exception")
    private Boolean hasException;
    @Column(name = "exception", length = 65535)
    private String exception;
    @Column(name = "description", length = 65535)
    private String description;
    @Column(name = "total_annotated_words")
    private Integer totalAnnotatedWords;
    @Column(name = "hash", length = 40)
    private String hash;
    @Column(name = "documents_bytes")
    private Integer documentsBytes;
    @Column(name = "lock", nullable = false)
    private boolean lock;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "private_prediction_evaluation_id")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequests"})
    private PrivatePredictionEvaluationEntity privatePredictionEvaluation;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "schedule_request_id")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequests"})
    private ScheduleRequestEntity scheduleRequest;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "server_id", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequests"})
    private ServerEntity server;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "server_version_id", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequests"})
    private ServerVersionEntity serverVersion;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "task_id")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequests"})
    private TaskEntity task;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "predictionRequest")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequest"})
    private Set<PredictionResponseEntity> predictionResponses = new HashSet<>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "predictionRequest")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequest"})
    private Set<PrivatePredictionEntity> privatePredictionss = new HashSet<>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "predictionRequest")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "predictionRequest"})
    private Set<PredictionEntity> predictions = new HashSet<>(0);

}


