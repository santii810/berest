package es.uvigo.esei.sgvilar.berest.entities;
// Generated 12-mar-2019 17:18:59 by Hibernate Tools 4.3.1


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * ScheduleRequestEntity generated by hbm2java
 */
@Entity
@Getter
@Setter
@Table(name = "schedule_request", catalog = "")
public class ScheduleRequestEntity implements java.io.Serializable {

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    private Integer id;

    //    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "request_evaluation_id", nullable = false)
//    private RequestEvaluation requestEvaluation;
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "schedule_algorithm_id", nullable = false)
//    private ScheduleAlgorithm scheduleAlgorithm;
    @Column(name = "name", length = 2000)
    private String name;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    private Date created;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "deadline", length = 19)
    private Date deadline;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "released_date", length = 19)
    private Date releasedDate;
    @Column(name = "executed", nullable = false)
    private boolean executed;
    @Column(name = "best_server")
    private Integer bestServer;
    @Column(name = "best_server_time", precision = 12, scale = 0)
    private Float bestServerTime;
    @Column(name = "lowest_server")
    private Integer lowestServer;
    @Column(name = "lowest_server_time", precision = 12, scale = 0)
    private Float lowestServerTime;
    @Column(name = "random_documents", nullable = false)
    private boolean randomDocuments;
    @Column(name = "random_types", nullable = false)
    private boolean randomTypes;
    @Column(name = "number_of_documents_to_request")
    private Integer numberOfDocumentsToRequest;
    @Column(name = "number_of_types_to_request")
    private Integer numberOfTypesToRequest;
    @Column(name = "exception", length = 65535)
    private String exception;
    @Column(name = "total_characters")
    private Integer totalCharacters;
    @Column(name = "total_words")
    private Integer totalWords;
    @Column(name = "total_bytes")
    private Integer totalBytes;
    @Column(name = "partition_size")
    private Integer partitionSize;
    @Column(name = "time_between_request")
    private Integer timeBetweenRequest;
    @Column(name = "random_time", nullable = false)
    private boolean randomTime;
    @Column(name = "create_before_release_date", nullable = false)
    private boolean createBeforeReleaseDate;
    @Column(name = "debug_info", length = 65535)
    private String debugInfo;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "schedule_request_document", catalog = "metaserver2", joinColumns = {
            @JoinColumn(name = "schedule_request_id", nullable = false, updatable = false)}, inverseJoinColumns = {
            @JoinColumn(name = "document_id", nullable = false, updatable = false)})
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "scheduleRequests"})
    private Set<DocumentEntity> documents = new HashSet<DocumentEntity>(0);

    //    @ManyToMany(fetch = FetchType.LAZY)
//    @JoinTable(name = "schedule_request_document_provider", catalog = "metaserver2", joinColumns = {
//            @JoinColumn(name = "schedule_request_id", nullable = false, updatable = false)}, inverseJoinColumns = {
//            @JoinColumn(name = "document_provider_id", nullable = false, updatable = false)})
//    private Set<DocumentProvider> documentProviders = new HashSet<DocumentProvider>(0);

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "schedule_request_type", catalog = "metaserver2", joinColumns = {
            @JoinColumn(name = "schedule_request_id", nullable = false, updatable = false)}, inverseJoinColumns = {
            @JoinColumn(name = "type_id", nullable = false, updatable = false)})
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler", "scheduleRequests"})
    private Set<TypeEntity> types = new HashSet<TypeEntity>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "scheduleRequest")
    private Set<PredictionRequestEntity> predictionRequests = new HashSet<>(0);
}


