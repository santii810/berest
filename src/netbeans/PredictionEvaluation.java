package generador.de.modelos;
// Generated 12-mar-2019 17:18:59 by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PredictionEvaluation generated by hbm2java
 */
@Entity
@Table(name="prediction_evaluation"
    ,catalog="metaserver2"
)
public class PredictionEvaluation  implements java.io.Serializable {


     private Integer id;
     private Competition competition;
     private CompetitionBenchmark competitionBenchmark;
     private GoldStandardUpload goldStandardUpload;
     private Server server;
     private ServerVersion serverVersion;
     private User user;
     private Date date;
     private Float evaluationSeconds;
     private Float macroFScore;
     private Float macroPrecision;
     private Float macroRecall;
     private Float microFScore;
     private Float microPrecision;
     private Float microRecall;
     private Integer truePositives;
     private Integer falsePositives;
     private Integer falseNegatives;
     private String truePositivesJson;
     private String falsePositivesJson;
     private String falseNegativesJson;
     private Float standardDeviation;
     private Set<DocumentTypeFalseNegative> documentTypeFalseNegatives = new HashSet<DocumentTypeFalseNegative>(0);
     private Set<DocumentTypeTruePositive> documentTypeTruePositives = new HashSet<DocumentTypeTruePositive>(0);
     private Set<TypePredictionEvaluation> typePredictionEvaluations = new HashSet<TypePredictionEvaluation>(0);
     private Set<DocumentPredictionEvaluation> documentPredictionEvaluations = new HashSet<DocumentPredictionEvaluation>(0);
     private Set<DocumentTypeFalsePositive> documentTypeFalsePositives = new HashSet<DocumentTypeFalsePositive>(0);

    public PredictionEvaluation() {
    }

	
    public PredictionEvaluation(Competition competition, CompetitionBenchmark competitionBenchmark, GoldStandardUpload goldStandardUpload, Server server, ServerVersion serverVersion, User user) {
        this.competition = competition;
        this.competitionBenchmark = competitionBenchmark;
        this.goldStandardUpload = goldStandardUpload;
        this.server = server;
        this.serverVersion = serverVersion;
        this.user = user;
    }
    public PredictionEvaluation(Competition competition, CompetitionBenchmark competitionBenchmark, GoldStandardUpload goldStandardUpload, Server server, ServerVersion serverVersion, User user, Date date, Float evaluationSeconds, Float macroFScore, Float macroPrecision, Float macroRecall, Float microFScore, Float microPrecision, Float microRecall, Integer truePositives, Integer falsePositives, Integer falseNegatives, String truePositivesJson, String falsePositivesJson, String falseNegativesJson, Float standardDeviation, Set<DocumentTypeFalseNegative> documentTypeFalseNegatives, Set<DocumentTypeTruePositive> documentTypeTruePositives, Set<TypePredictionEvaluation> typePredictionEvaluations, Set<DocumentPredictionEvaluation> documentPredictionEvaluations, Set<DocumentTypeFalsePositive> documentTypeFalsePositives) {
       this.competition = competition;
       this.competitionBenchmark = competitionBenchmark;
       this.goldStandardUpload = goldStandardUpload;
       this.server = server;
       this.serverVersion = serverVersion;
       this.user = user;
       this.date = date;
       this.evaluationSeconds = evaluationSeconds;
       this.macroFScore = macroFScore;
       this.macroPrecision = macroPrecision;
       this.macroRecall = macroRecall;
       this.microFScore = microFScore;
       this.microPrecision = microPrecision;
       this.microRecall = microRecall;
       this.truePositives = truePositives;
       this.falsePositives = falsePositives;
       this.falseNegatives = falseNegatives;
       this.truePositivesJson = truePositivesJson;
       this.falsePositivesJson = falsePositivesJson;
       this.falseNegativesJson = falseNegativesJson;
       this.standardDeviation = standardDeviation;
       this.documentTypeFalseNegatives = documentTypeFalseNegatives;
       this.documentTypeTruePositives = documentTypeTruePositives;
       this.typePredictionEvaluations = typePredictionEvaluations;
       this.documentPredictionEvaluations = documentPredictionEvaluations;
       this.documentTypeFalsePositives = documentTypeFalsePositives;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="competition_id", nullable=false)
    public Competition getCompetition() {
        return this.competition;
    }
    
    public void setCompetition(Competition competition) {
        this.competition = competition;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="competition_benchmark_id", nullable=false)
    public CompetitionBenchmark getCompetitionBenchmark() {
        return this.competitionBenchmark;
    }
    
    public void setCompetitionBenchmark(CompetitionBenchmark competitionBenchmark) {
        this.competitionBenchmark = competitionBenchmark;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="gold_standard_upload_id", nullable=false)
    public GoldStandardUpload getGoldStandardUpload() {
        return this.goldStandardUpload;
    }
    
    public void setGoldStandardUpload(GoldStandardUpload goldStandardUpload) {
        this.goldStandardUpload = goldStandardUpload;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="server_id", nullable=false)
    public Server getServer() {
        return this.server;
    }
    
    public void setServer(Server server) {
        this.server = server;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="server_version_id", nullable=false)
    public ServerVersion getServerVersion() {
        return this.serverVersion;
    }
    
    public void setServerVersion(ServerVersion serverVersion) {
        this.serverVersion = serverVersion;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="user_id", nullable=false)
    public User getUser() {
        return this.user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date", length=19)
    public Date getDate() {
        return this.date;
    }
    
    public void setDate(Date date) {
        this.date = date;
    }

    
    @Column(name="evaluation_seconds", precision=12, scale=0)
    public Float getEvaluationSeconds() {
        return this.evaluationSeconds;
    }
    
    public void setEvaluationSeconds(Float evaluationSeconds) {
        this.evaluationSeconds = evaluationSeconds;
    }

    
    @Column(name="macro_f_score", precision=12, scale=0)
    public Float getMacroFScore() {
        return this.macroFScore;
    }
    
    public void setMacroFScore(Float macroFScore) {
        this.macroFScore = macroFScore;
    }

    
    @Column(name="macro_precision", precision=12, scale=0)
    public Float getMacroPrecision() {
        return this.macroPrecision;
    }
    
    public void setMacroPrecision(Float macroPrecision) {
        this.macroPrecision = macroPrecision;
    }

    
    @Column(name="macro_recall", precision=12, scale=0)
    public Float getMacroRecall() {
        return this.macroRecall;
    }
    
    public void setMacroRecall(Float macroRecall) {
        this.macroRecall = macroRecall;
    }

    
    @Column(name="micro_f_score", precision=12, scale=0)
    public Float getMicroFScore() {
        return this.microFScore;
    }
    
    public void setMicroFScore(Float microFScore) {
        this.microFScore = microFScore;
    }

    
    @Column(name="micro_precision", precision=12, scale=0)
    public Float getMicroPrecision() {
        return this.microPrecision;
    }
    
    public void setMicroPrecision(Float microPrecision) {
        this.microPrecision = microPrecision;
    }

    
    @Column(name="micro_recall", precision=12, scale=0)
    public Float getMicroRecall() {
        return this.microRecall;
    }
    
    public void setMicroRecall(Float microRecall) {
        this.microRecall = microRecall;
    }

    
    @Column(name="true_positives")
    public Integer getTruePositives() {
        return this.truePositives;
    }
    
    public void setTruePositives(Integer truePositives) {
        this.truePositives = truePositives;
    }

    
    @Column(name="false_positives")
    public Integer getFalsePositives() {
        return this.falsePositives;
    }
    
    public void setFalsePositives(Integer falsePositives) {
        this.falsePositives = falsePositives;
    }

    
    @Column(name="false_negatives")
    public Integer getFalseNegatives() {
        return this.falseNegatives;
    }
    
    public void setFalseNegatives(Integer falseNegatives) {
        this.falseNegatives = falseNegatives;
    }

    
    @Column(name="true_positives_json")
    public String getTruePositivesJson() {
        return this.truePositivesJson;
    }
    
    public void setTruePositivesJson(String truePositivesJson) {
        this.truePositivesJson = truePositivesJson;
    }

    
    @Column(name="false_positives_json")
    public String getFalsePositivesJson() {
        return this.falsePositivesJson;
    }
    
    public void setFalsePositivesJson(String falsePositivesJson) {
        this.falsePositivesJson = falsePositivesJson;
    }

    
    @Column(name="false_negatives_json")
    public String getFalseNegativesJson() {
        return this.falseNegativesJson;
    }
    
    public void setFalseNegativesJson(String falseNegativesJson) {
        this.falseNegativesJson = falseNegativesJson;
    }

    
    @Column(name="standard_deviation", precision=12, scale=0)
    public Float getStandardDeviation() {
        return this.standardDeviation;
    }
    
    public void setStandardDeviation(Float standardDeviation) {
        this.standardDeviation = standardDeviation;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="predictionEvaluation")
    public Set<DocumentTypeFalseNegative> getDocumentTypeFalseNegatives() {
        return this.documentTypeFalseNegatives;
    }
    
    public void setDocumentTypeFalseNegatives(Set<DocumentTypeFalseNegative> documentTypeFalseNegatives) {
        this.documentTypeFalseNegatives = documentTypeFalseNegatives;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="predictionEvaluation")
    public Set<DocumentTypeTruePositive> getDocumentTypeTruePositives() {
        return this.documentTypeTruePositives;
    }
    
    public void setDocumentTypeTruePositives(Set<DocumentTypeTruePositive> documentTypeTruePositives) {
        this.documentTypeTruePositives = documentTypeTruePositives;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="predictionEvaluation")
    public Set<TypePredictionEvaluation> getTypePredictionEvaluations() {
        return this.typePredictionEvaluations;
    }
    
    public void setTypePredictionEvaluations(Set<TypePredictionEvaluation> typePredictionEvaluations) {
        this.typePredictionEvaluations = typePredictionEvaluations;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="predictionEvaluation")
    public Set<DocumentPredictionEvaluation> getDocumentPredictionEvaluations() {
        return this.documentPredictionEvaluations;
    }
    
    public void setDocumentPredictionEvaluations(Set<DocumentPredictionEvaluation> documentPredictionEvaluations) {
        this.documentPredictionEvaluations = documentPredictionEvaluations;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="predictionEvaluation")
    public Set<DocumentTypeFalsePositive> getDocumentTypeFalsePositives() {
        return this.documentTypeFalsePositives;
    }
    
    public void setDocumentTypeFalsePositives(Set<DocumentTypeFalsePositive> documentTypeFalsePositives) {
        this.documentTypeFalsePositives = documentTypeFalsePositives;
    }




}


