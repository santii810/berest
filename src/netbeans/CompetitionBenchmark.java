package generador.de.modelos;
// Generated 12-mar-2019 17:18:59 by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * CompetitionBenchmark generated by hbm2java
 */
@Entity
@Table(name="competition_benchmark"
    ,catalog="metaserver2"
)
public class CompetitionBenchmark  implements java.io.Serializable {


     private Integer id;
     private Competition competition;
     private GoldStandardUpload goldStandardUpload;
     private Task task;
     private Float avgEvaluationSeconds;
     private Date elapsedSeconds;
     private boolean isPublic;
     private Date created;
     private String measuresByTerm;
     private String measuresByDocument;
     private String measuresByType;
     private Float avgMacroFScore;
     private Float avgMacroPrecision;
     private Float avgMacroRecall;
     private Float avgMicroFScore;
     private Float avgMicroPrecision;
     private Float avgMicroRecall;
     private Boolean forceUpload;
     private Float evaluationSeconds;
     private Set<PredictionEvaluation> predictionEvaluations = new HashSet<PredictionEvaluation>(0);

    public CompetitionBenchmark() {
    }

	
    public CompetitionBenchmark(Competition competition, GoldStandardUpload goldStandardUpload, boolean isPublic) {
        this.competition = competition;
        this.goldStandardUpload = goldStandardUpload;
        this.isPublic = isPublic;
    }
    public CompetitionBenchmark(Competition competition, GoldStandardUpload goldStandardUpload, Task task, Float avgEvaluationSeconds, Date elapsedSeconds, boolean isPublic, Date created, String measuresByTerm, String measuresByDocument, String measuresByType, Float avgMacroFScore, Float avgMacroPrecision, Float avgMacroRecall, Float avgMicroFScore, Float avgMicroPrecision, Float avgMicroRecall, Boolean forceUpload, Float evaluationSeconds, Set<PredictionEvaluation> predictionEvaluations) {
       this.competition = competition;
       this.goldStandardUpload = goldStandardUpload;
       this.task = task;
       this.avgEvaluationSeconds = avgEvaluationSeconds;
       this.elapsedSeconds = elapsedSeconds;
       this.isPublic = isPublic;
       this.created = created;
       this.measuresByTerm = measuresByTerm;
       this.measuresByDocument = measuresByDocument;
       this.measuresByType = measuresByType;
       this.avgMacroFScore = avgMacroFScore;
       this.avgMacroPrecision = avgMacroPrecision;
       this.avgMacroRecall = avgMacroRecall;
       this.avgMicroFScore = avgMicroFScore;
       this.avgMicroPrecision = avgMicroPrecision;
       this.avgMicroRecall = avgMicroRecall;
       this.forceUpload = forceUpload;
       this.evaluationSeconds = evaluationSeconds;
       this.predictionEvaluations = predictionEvaluations;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="competition_id", nullable=false)
    public Competition getCompetition() {
        return this.competition;
    }
    
    public void setCompetition(Competition competition) {
        this.competition = competition;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="gold_standard_upload_id", nullable=false)
    public GoldStandardUpload getGoldStandardUpload() {
        return this.goldStandardUpload;
    }
    
    public void setGoldStandardUpload(GoldStandardUpload goldStandardUpload) {
        this.goldStandardUpload = goldStandardUpload;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="task_id")
    public Task getTask() {
        return this.task;
    }
    
    public void setTask(Task task) {
        this.task = task;
    }

    
    @Column(name="avg_evaluation_seconds", precision=12, scale=0)
    public Float getAvgEvaluationSeconds() {
        return this.avgEvaluationSeconds;
    }
    
    public void setAvgEvaluationSeconds(Float avgEvaluationSeconds) {
        this.avgEvaluationSeconds = avgEvaluationSeconds;
    }

    @Temporal(TemporalType.TIME)
    @Column(name="elapsed_seconds", length=8)
    public Date getElapsedSeconds() {
        return this.elapsedSeconds;
    }
    
    public void setElapsedSeconds(Date elapsedSeconds) {
        this.elapsedSeconds = elapsedSeconds;
    }

    
    @Column(name="is_public", nullable=false)
    public boolean isIsPublic() {
        return this.isPublic;
    }
    
    public void setIsPublic(boolean isPublic) {
        this.isPublic = isPublic;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", length=19)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }

    
    @Column(name="measures_by_term")
    public String getMeasuresByTerm() {
        return this.measuresByTerm;
    }
    
    public void setMeasuresByTerm(String measuresByTerm) {
        this.measuresByTerm = measuresByTerm;
    }

    
    @Column(name="measures_by_document")
    public String getMeasuresByDocument() {
        return this.measuresByDocument;
    }
    
    public void setMeasuresByDocument(String measuresByDocument) {
        this.measuresByDocument = measuresByDocument;
    }

    
    @Column(name="measures_by_type")
    public String getMeasuresByType() {
        return this.measuresByType;
    }
    
    public void setMeasuresByType(String measuresByType) {
        this.measuresByType = measuresByType;
    }

    
    @Column(name="avg_macro_f_score", precision=12, scale=0)
    public Float getAvgMacroFScore() {
        return this.avgMacroFScore;
    }
    
    public void setAvgMacroFScore(Float avgMacroFScore) {
        this.avgMacroFScore = avgMacroFScore;
    }

    
    @Column(name="avg_macro_precision", precision=12, scale=0)
    public Float getAvgMacroPrecision() {
        return this.avgMacroPrecision;
    }
    
    public void setAvgMacroPrecision(Float avgMacroPrecision) {
        this.avgMacroPrecision = avgMacroPrecision;
    }

    
    @Column(name="avg_macro_recall", precision=12, scale=0)
    public Float getAvgMacroRecall() {
        return this.avgMacroRecall;
    }
    
    public void setAvgMacroRecall(Float avgMacroRecall) {
        this.avgMacroRecall = avgMacroRecall;
    }

    
    @Column(name="avg_micro_f_score", precision=12, scale=0)
    public Float getAvgMicroFScore() {
        return this.avgMicroFScore;
    }
    
    public void setAvgMicroFScore(Float avgMicroFScore) {
        this.avgMicroFScore = avgMicroFScore;
    }

    
    @Column(name="avg_micro_precision", precision=12, scale=0)
    public Float getAvgMicroPrecision() {
        return this.avgMicroPrecision;
    }
    
    public void setAvgMicroPrecision(Float avgMicroPrecision) {
        this.avgMicroPrecision = avgMicroPrecision;
    }

    
    @Column(name="avg_micro_recall", precision=12, scale=0)
    public Float getAvgMicroRecall() {
        return this.avgMicroRecall;
    }
    
    public void setAvgMicroRecall(Float avgMicroRecall) {
        this.avgMicroRecall = avgMicroRecall;
    }

    
    @Column(name="force_upload")
    public Boolean getForceUpload() {
        return this.forceUpload;
    }
    
    public void setForceUpload(Boolean forceUpload) {
        this.forceUpload = forceUpload;
    }

    
    @Column(name="evaluation_seconds", precision=12, scale=0)
    public Float getEvaluationSeconds() {
        return this.evaluationSeconds;
    }
    
    public void setEvaluationSeconds(Float evaluationSeconds) {
        this.evaluationSeconds = evaluationSeconds;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="competitionBenchmark")
    public Set<PredictionEvaluation> getPredictionEvaluations() {
        return this.predictionEvaluations;
    }
    
    public void setPredictionEvaluations(Set<PredictionEvaluation> predictionEvaluations) {
        this.predictionEvaluations = predictionEvaluations;
    }




}


